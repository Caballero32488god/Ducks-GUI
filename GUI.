local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- Create the Fluent UI
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
})

-- Add Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "more-horizontal" }),
}

-- Notify that the GUI has loaded
Fluent:Notify({
    Title = "Welcome!",
    Content = "This GUI includes various settings.",
    Duration = 5
})

-- Create a scrollable frame for the Main Tab
local scrollFrame = Instance.new("ScrollingFrame")
scrollFrame.Size = UDim2.new(1, 0, 1, 0)
scrollFrame.CanvasSize = UDim2.new(0, 0, 5, 0) -- Adjust canvas size to fit controls
scrollFrame.ScrollBarThickness = 8
scrollFrame.Parent = Tabs.Main.Content

-- Main Tab Content
local Section = scrollFrame:AddSection("Main Controls")

-- Speed Input
Section:AddInput("Speed", {
    Title = "Change Speed",
    Placeholder = "Enter Speed Value",
    Callback = function(value)
        local num = tonumber(value)
        if num then
            LocalPlayer.Character.Humanoid.WalkSpeed = num
        end
    end
})

-- Jump Power Input
Section:AddInput("JumpPower", {
    Title = "Change Jump Power",
    Placeholder = "Enter Jump Power Value",
    Callback = function(value)
        local num = tonumber(value)
        if num then
            LocalPlayer.Character.Humanoid.JumpPower = num
        end
    end
})

-- Infinite Jump Toggle
local infiniteJumpToggle = Section:AddToggle("Infinite Jump", {
    Title = "Enable Infinite Jump",
    Default = false,
})

-- Jump Logic
UserInputService.JumpRequest:Connect(function()
    if infiniteJumpToggle.Value then
        local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)

-- Noclip Toggle
local noclipToggle = Section:AddToggle("Noclip", {
    Title = "Enable Noclip",
    Default = false,
})

-- Noclip Logic
local function setNoclip(value)
    local character = LocalPlayer.Character
    if character then
        for _, part in ipairs(character:GetChildren()) do
            if part:IsA("BasePart") then
                part.CanCollide = not value
            end
        end
    end
end

noclipToggle:OnChanged(function(value)
    while noclipToggle.Value do
        setNoclip(true)
        wait(0.1)
    end
    setNoclip(false)
end)

-- Gravity Changer Input
Section:AddInput("Gravity", {
    Title = "Change Gravity",
    Placeholder = "Enter Gravity Value",
    Callback = function(value)
        local num = tonumber(value)
        if num then
            workspace.Gravity = num
        end
    end
})

-- FOV Input
Section:AddInput("FOV", {
    Title = "Change FOV",
    Placeholder = "Enter FOV Value",
    Callback = function(value)
        local num = tonumber(value)
        if num then
            Camera.FieldOfView = num
        end
    end
})

-- Hip Height Input
Section:AddInput("HipHeight", {
    Title = "Change Hip Height",
    Placeholder = "Enter Hip Height Value",
    Callback = function(value)
        local num = tonumber(value)
        if num then
            LocalPlayer.Character.Humanoid.HipHeight = num
        end
    end
})

-- Time Manipulation Dropdown
local timeDropdown = Section:AddDropdown("Time Manipulation", {
    Title = "Select Time",
    Values = {"Morning", "Afternoon", "Night"},
    Multi = false,
    Default = 1,
})

timeDropdown:OnChanged(function(value)
    if value == "Morning" then
        game.Lighting.ClockTime = 6
    elseif value == "Afternoon" then
        game.Lighting.ClockTime = 12
    elseif value == "Night" then
        game.Lighting.ClockTime = 18
    end
end)

-- Server Hop (Low Player Count) Button
local function serverHopLowPlayer()
    local placeId = game.PlaceId
    local success, response = pcall(function()
        return HttpService:GetAsync("https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc")
    end)

    if success then
        local servers = HttpService:JSONDecode(response).data
        local targetServer = nil

        for _, server in ipairs(servers) do
            if server.playing < server.maxPlayers then
                targetServer = server
                break
            end
        end

        if targetServer then
            TeleportService:TeleportToPlaceInstance(placeId, targetServer.id, LocalPlayer)
        else
            Fluent:Notify({
                Title = "No Available Servers",
                Content = "No servers with available spots found.",
                Duration = 5
            })
        end
    else
        Fluent:Notify({
            Title = "Error",
            Content = "Failed to retrieve server list.",
            Duration = 5
        })
    end
end

local lowPlayerHopButton = Section:AddButton("Server Hop (Low Players)", {
    Title = "Hop to a Low Player Count Server",
    Callback = serverHopLowPlayer,
})
