local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "dice-1" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "skull" }) -- Update icon here
}

local Options = Fluent.Options

do
    -- Main tab
    Tabs.Main:AddParagraph({
        Title = "Main Content",
        Content = "This tab is intentionally left empty."
    })

    -- Killer tab
    Tabs.Killer:AddButton({
        Title = "Start Killing",
        Description = "Set tools and start killing.",
        Callback = function()
            local Players = game:GetService("Players")
            local LocalPlayer = Players.LocalPlayer

            -- Set values for tools
            local tools = {
                {"Punch", "attackTime", 0.1},
                {"Ground Slam", "attackTime", 0.1},
                {"Stomp", "attackTime", 0.1},
                {"Handstands", "repTime", 0.1},
                {"Pushups", "repTime", 0.1},
                {"Weight", "repTime", 0.1},
                {"Situps", "repTime", 0.1}
            }

            for _, tool in pairs(tools) do
                local toolName, property, value = unpack(tool)
                local toolInstance = LocalPlayer.Backpack:FindFirstChild(toolName)

                if toolInstance then
                    toolInstance[property].Value = value
                end
            end

            -- Function to equip the Punch tool and perform the punch action
            local function equipAndPunch()
                local punchTool = LocalPlayer.Backpack:FindFirstChild("Punch")
                
                if punchTool then
                    LocalPlayer.Character.Humanoid:EquipTool(punchTool)
                    print("Equipped Punch tool.")

                    wait(0.1) -- Wait for tool to equip

                    -- Function to perform the punch action
                    local function performPunch()
                        LocalPlayer.muscleEvent:FireServer("punch", "leftHand")  -- Example action
                        LocalPlayer.muscleEvent:FireServer("punch", "rightHand") -- Example action
                    end

                    -- Start the punching loop
                    while true do
                        performPunch()
                        wait(0.5) -- Adjust as necessary
                    end
                else
                    print("Punch tool not found in Backpack.")
                end
            end

            -- Call the function to equip the tool and start punching
            equipAndPunch()
        end
    })

    -- Dropdowns for killing actions
    local killSingleDropdown = Tabs.Killer:AddDropdown("KillSingle", {
        Title = "Kill Single Person",
        Values = {}, -- Populate with player names from the server
        Multi = false,
        Default = 1
    })

    local killMultipleDropdown = Tabs.Killer:AddDropdown("KillMultiple", {
        Title = "Kill Multiple People",
        Values = {}, -- Populate with player names from the server
        Multi = true,
        Default = {}
    })

    local noKillSingleDropdown = Tabs.Killer:AddDropdown("NoKillSingle", {
        Title = "NoKill Single Person",
        Values = {}, -- Populate with player names from the server
        Multi = false,
        Default = 1
    })

    local noKillMultipleDropdown = Tabs.Killer:AddDropdown("NoKillMultiple", {
        Title = "NoKill Multiple People",
        Values = {}, -- Populate with player names from the server
        Multi = true,
        Default = {}
    })

    -- Load players into dropdowns (pseudo code, you need to implement this)
    local function loadPlayersIntoDropdowns()
        for _, player in pairs(Players:GetPlayers()) do
            local name = player.Name
            table.insert(killSingleDropdown.Values, name)
            table.insert(killMultipleDropdown.Values, name)
            table.insert(noKillSingleDropdown.Values, name)
            table.insert(noKillMultipleDropdown.Values, name)
        end
    end

    loadPlayersIntoDropdowns()

    -- Settings tab (keep original settings intact)
    InterfaceManager:BuildInterfaceSection(Tabs.Settings)
    SaveManager:BuildConfigSection(Tabs.Settings)

    Fluent:Notify({
        Title = "Fluent",
        Content = "The script has been loaded.",
        Duration = 8
    })
end

-- Addons
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

Window:SelectTab(1)

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
SaveManager:LoadAutoloadConfig()
