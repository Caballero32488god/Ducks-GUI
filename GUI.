local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by Masterboy123",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Kill = Window:AddTab({ Title = "Kill", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "" }),
    Stats = Window:AddTab({ Title = "Stats", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

-- Main Tab
do
    -- InstantHit Button
    Tabs.Main:AddButton({
        Title = "InstantHit",
        Callback = function()
            local Players = game:GetService("Players")
            local LocalPlayer = Players.LocalPlayer
            local backpack = LocalPlayer:WaitForChild("Backpack")

            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:IsA("Tool") then
                    if tool:FindFirstChild("attackTime") then
                        tool.attackTime.Value = 0.1
                    end
                    if tool:FindFirstChild("repTime") then
                        tool.repTime.Value = 0.1
                    end
                end
            end
            
            print("InstantHit activated.")
        end
    })

    -- LockPosition Button
    Tabs.Main:AddButton({
        Title = "LockPosition",
        Callback = function()
            local Players = game:GetService("Players")
            local LocalPlayer = Players.LocalPlayer
            
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local humanoidRootPart = LocalPlayer.Character.HumanoidRootPart
                humanoidRootPart.Anchored = true
                print("Position locked.")
            else
                print("Character not found.")
            end
        end
    })
end

-- Kill Tab
do
    -- Single Player Dropdown
    local singleDropdown = Tabs.Kill:AddDropdown("SinglePlayerDropdown", {
        Title = "Select Player",
        Values = {}, -- Will be populated
        Multi = false,
    })

    -- Multiple Player Dropdown
    local multiDropdown = Tabs.Kill:AddDropdown("MultiPlayerDropdown", {
        Title = "Select Multiple Players",
        Values = {}, -- Will be populated
        Multi = true,
    })

    local function updatePlayerDropdowns()
        local playerNames = {}
        for _, player in ipairs(game.Players:GetPlayers()) do
            table.insert(playerNames, player.Name)
        end
        singleDropdown:SetValue(playerNames)
        multiDropdown:SetValue(playerNames)
    end

    singleDropdown:OnChanged(function(selectedName)
        print("Selected single player for kill:", selectedName)
        -- Implement kill logic for the selected player
    end)

    multiDropdown:OnChanged(function(selectedNames)
        print("Selected multiple players for kill:", table.concat(selectedNames, ", "))
        -- Implement kill logic for the selected players
    end)

    updatePlayerDropdowns()
    game.Players.PlayerAdded:Connect(updatePlayerDropdowns)
    game.Players.PlayerRemoving:Connect(updatePlayerDropdowns)
end

-- Stats Tab
do
    local playerDropdown = Tabs.Stats:AddDropdown("PlayerDropdown", {
        Title = "Select Player",
        Values = {}, -- Will be populated with player names
        Multi = false,
    })

    local statsDisplay = Tabs.Stats:AddParagraph({
        Title = "Player Stats",
        Content = "Select a player to see their stats.",
    })

    local function updatePlayerDropdown()
        local playerNames = {}
        for _, player in ipairs(game.Players:GetPlayers()) do
            table.insert(playerNames, player.Name)
        end
        playerDropdown:SetValue(playerNames)
    end

    local function displayPlayerStats(playerName)
        local player = game.Players:FindFirstChild(playerName)
        if player and player:FindFirstChild("leaderstats") then
            local leaderstats = player.leaderstats
            local statsContent = {}

            for _, stat in ipairs(leaderstats:GetChildren()) do
                if stat:IsA("IntValue") then
                    table.insert(statsContent, string.format("%s (%s): %d", player.Name, stat.Name, stat.Value))
                end
            end

            statsDisplay.Content = table.concat(statsContent, "\n") or "No stats available."
        else
            statsDisplay.Content = "Player not found or has no stats."
        end
    end

    playerDropdown:OnChanged(function(selectedName)
        displayPlayerStats(selectedName)
    end)

    updatePlayerDropdown()
    game.Players.PlayerAdded:Connect(updatePlayerDropdown)
    game.Players.PlayerRemoving:Connect(updatePlayerDropdown)
end

-- Misc Tab
do
    Tabs.Misc:AddButton({
        Title = "Walk on Water",
        Callback = function()
            local workspace = game:GetService("Workspace")
            local seaPart = workspace:FindFirstChild("seaPart")
            if seaPart then
                seaPart.Material = Enum.Material.SmoothPlastic
                seaPart.CanCollide = true
                seaPart.Size = Vector3.new(100, 1, 100) -- Example dimensions
                print("Changed seaPart to a walkable platform.")
            end
        end
    })
end

-- SaveManager and InterfaceManager setup
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

SaveManager:LoadAutoloadConfig()
