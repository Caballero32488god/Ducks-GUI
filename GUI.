local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "farming" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "skull" }),
    Stats = Window:AddTab({ Title = "Stats", Icon = "bar-chart" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "more-horizontal" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Notification",
        Content = "This script has been loaded.",
        Duration = 5
    })

    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer

    local Dropdown = Tabs.Killer:AddDropdown("Auto Kill Single Person", {
        Title = "Players",
        Values = {},
        Multi = false,
        Default = 1,
    })

    local MultiDropdown = Tabs.Killer:AddDropdown("Kill Multiple Players", {
        Title = "Players",
        Values = {},
        Multi = true,
        Default = {},
    })

    local function updatePlayerList()
        Dropdown.Values = {}
        MultiDropdown.Values = {}

        for _, player in ipairs(Players:GetPlayers()) do
            table.insert(Dropdown.Values, player.Name)
            table.insert(MultiDropdown.Values, player.Name)
        end

        if #Dropdown.Values > 0 then
            Dropdown:SetValue(Dropdown.Values[1])
        end
        if #MultiDropdown.Values > 0 then
            MultiDropdown:SetValue({MultiDropdown.Values[1]})
        end
    end

    updatePlayerList()

    while true do
        wait(30)
        updatePlayerList()
    end

    Dropdown:OnChanged(function(Value)
        print("Single Dropdown changed:", Value)
    end)

    MultiDropdown:OnChanged(function(Value)
        print("Multi Dropdown changed:", table.concat(Value, ", "))
    end)

    local Toggle = Tabs.Killer:AddToggle("MyToggle", {
        Title = "Start Teleporting",
        Default = false,
    })

    Toggle:OnChanged(function()
        if Toggle.Value then
            local function teleportPlayers(selectedPlayers)
                local myCharacter = LocalPlayer.Character
                if myCharacter then
                    local myPosition = myCharacter:FindFirstChild("HumanoidRootPart").Position

                    if #selectedPlayers == 0 then
                        -- Teleport everyone
                        for _, player in ipairs(Players:GetPlayers()) do
                            if player ~= LocalPlayer then
                                local character = player.Character
                                if character and character:FindFirstChild("HumanoidRootPart") then
                                    character.HumanoidRootPart.Position = myPosition
                                end
                            end
                        end
                    else
                        -- Teleport selected players
                        for _, playerName in ipairs(selectedPlayers) do
                            local player = Players:FindFirstChild(playerName)
                            if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                                player.Character.HumanoidRootPart.Position = myPosition
                            end
                        end
                    end
                end
            end

            local selectedSingle = Dropdown.Value
            local selectedMultiple = MultiDropdown.Value

            if selectedSingle then
                teleportPlayers({selectedSingle}) -- Teleport the single selected player
            elseif #selectedMultiple > 0 then
                teleportPlayers(selectedMultiple) -- Teleport the selected multiple players
            else
                teleportPlayers({}) -- No selection, teleport everyone
            end
        end
    end)
end

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
