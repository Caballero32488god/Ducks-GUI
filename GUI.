local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Duck:CreateWindow({
    Title = "Duck " .. Duck.Version,
    SubTitle = "by Masterboy123",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "farming" })
    Killer = Window:AddTab({ Title = "Killer", Icon = "skull" })
    Stats = Window:AddTab({ Title = "Stats", Icon = "bar-chart" })
    Misc = Window:AddTab({ Title = "Misc", Icon = "more-horizontal" })
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Warning",
        Content = "This Gui Is Tranfered over to Duck",
        SubContent = "Your Welcome Duck", -- Optional
        Duration = 7 -- Set to nil to make the notification not disappear
    })

    local Toggle = Tabs.Killer:AddToggle("MyToggle", {Title = "Start Killing", Default = false })

    Toggle:OnChanged(function()
        print("Toggle changed:", Options.MyToggle.Value)
    end)

    Options.MyToggle:SetValue(false)

    local Players = game:GetService("Players")

    local Dropdown = Tabs.Killer:AddDropdown("Auto Kill Single Person", {
        Title = "Players",
        Values = {},
        Multi = false,
        Default = 1,
    })
    
    local function updatePlayerList()
        -- Clear existing values
        Dropdown.Values = {}
    
        -- Add current players to the dropdown
        for _, player in ipairs(Players:GetPlayers()) do
            table.insert(Dropdown.Values, player.Name)
        end
    
        -- Set the dropdown to the first player if there are any
        if #Dropdown.Values > 0 then
            Dropdown:SetValue(Dropdown.Values[1])
        end
    end
    
    -- Initial population of the dropdown
    updatePlayerList()
    
    -- Update the dropdown every 30 seconds
    while true do
        wait(30)
        updatePlayerList()
    end
    
    Dropdown:OnChanged(function(Value)
        print("Dropdown changed:", Value)
    end)
    

    local Players = game:GetService("Players")

local MultiDropdown = Tabs.Main:AddDropdown("PlayerMultiDropdown", {
    Title = "Players",
    Values = {},
    Multi = true, -- Enable multi-select
    Default = {},
})

local function updatePlayerList()
    -- Clear existing values
    MultiDropdown.Values = {}

    -- Add current players to the dropdown
    for _, player in ipairs(Players:GetPlayers()) do
        table.insert(MultiDropdown.Values, player.Name)
    end

    -- Set the dropdown to the first player if there are any
    if #MultiDropdown.Values > 0 then
        MultiDropdown:SetValue({MultiDropdown.Values[1]}) -- Set a default selected value
    end
end

-- Initial population of the dropdown
updatePlayerList()

-- Update the dropdown every 30 seconds
while true do
    wait(30)
    updatePlayerList()
end

MultiDropdown:OnChanged(function(Value)
    print("MultiDropdown changed:", table.concat(Value, ", "))
end)

