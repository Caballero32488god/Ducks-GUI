local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local RunService = game:GetService("RunService")

-- Create the Fluent UI
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
})

-- Add Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    Options = Window:AddTab({ Title = "Options", Icon = "settings" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "skull" }),
}

-- Notify that the GUI has loaded
Fluent:Notify({
    Title = "Welcome!",
    Content = "This GUI includes various settings.",
    Duration = 5
})

-- Main Tab Content
local MainSection = Tabs.Main:AddSection("Main Controls")

-- Speed Input
MainSection:AddInput("Speed", {
    Title = "Change Speed",
    Placeholder = "Enter Speed Value",
    Callback = function(value)
        local num = tonumber(value)
        if num then
            LocalPlayer.Character.Humanoid.WalkSpeed = num
        end
    end
})

-- Jump Power Input
MainSection:AddInput("JumpPower", {
    Title = "Change Jump Power",
    Placeholder = "Enter Jump Power Value",
    Callback = function(value)
        local num = tonumber(value)
        if num then
            LocalPlayer.Character.Humanoid.JumpPower = num
        end
    end
})

-- Infinite Jump Toggle
local infiniteJumpToggle = MainSection:AddToggle("Infinite Jump", {
    Title = "Enable Infinite Jump",
    Default = false,
})

UserInputService.JumpRequest:Connect(function()
    if infiniteJumpToggle.Value then
        local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)

-- Noclip Toggle
local noclipToggle = MainSection:AddToggle("Noclip", {
    Title = "Enable Noclip",
    Default = false,
})

local function setNoclip(value)
    local character = LocalPlayer.Character
    if character then
        for _, part in ipairs(character:GetChildren()) do
            if part:IsA("BasePart") then
                part.CanCollide = not value
            end
        end
    end
end

noclipToggle:OnChanged(function(value)
    while noclipToggle.Value do
        setNoclip(true)
        wait(0.1)
    end
    setNoclip(false)
end)

-- Gravity Changer Input
MainSection:AddInput("Gravity", {
    Title = "Change Gravity",
    Placeholder = "Enter Gravity Value",
    Callback = function(value)
        local num = tonumber(value)
        if num then
            workspace.Gravity = num
        end
    end
})

-- FOV Input
MainSection:AddInput("FOV", {
    Title = "Change FOV",
    Placeholder = "Enter FOV Value",
    Callback = function(value)
        local num = tonumber(value)
        if num then
            Camera.FieldOfView = num
        end
    end
})

-- Options Tab Content
local OptionsSection = Tabs.Options:AddSection("Advanced Controls")

-- Day-Night Cycle
local timeDropdown = OptionsSection:AddDropdown("Time Manipulation", {
    Title = "Select Time",
    Values = {"Morning", "Afternoon", "Night"},
    Multi = false,
    Default = 1,
})

timeDropdown:OnChanged(function(value)
    if value == "Morning" then
        game.Lighting.ClockTime = 6
    elseif value == "Afternoon" then
        game.Lighting.ClockTime = 12
    elseif value == "Night" then
        game.Lighting.ClockTime = 18
    end
end)

-- Killer Tab Content
local KillerSection = Tabs.Killer:AddSection("Killer Controls")

-- Hitspeed Input
local hitspeedValue = 1
KillerSection:AddInput("Hitspeed", {
    Title = "Set Hitspeed (0-100000)",
    Placeholder = "Enter Hitspeed Value",
    Callback = function(value)
        local num = tonumber(value)
        if num and num >= 0 and num <= 100000 then
            hitspeedValue = num
        else
            showNotification("Hitspeed must be between 0 and 100000.")
        end
    end
})

-- Dropdown for Player Selection
local selectedPlayers = {}
local playerDropdown = KillerSection:AddDropdown("Ignore Players", {
    Title = "Select Players to Ignore",
    Values = {}, -- This will be populated with player names
    Multi = true, -- Allow multiple selections
})

-- Populate dropdown with player names
local function updatePlayerDropdown()
    local playerNames = {}
    for _, player in pairs(Players:GetPlayers()) do
        table.insert(playerNames, player.Name)
    end
    playerDropdown:SetValues(playerNames)
end

-- Update the dropdown when players join or leave
Players.PlayerAdded:Connect(updatePlayerDropdown)
Players.PlayerRemoving:Connect(updatePlayerDropdown)

-- Update selected players on dropdown change
playerDropdown:OnChanged(function(selected)
    selectedPlayers = selected
end)

-- Start Auto Hit Toggle
local autoHitToggle = KillerSection:AddToggle("Auto Hit", {
    Title = "Toggle Auto Hit",
    Default = false,
    Callback = function(state)
        _G.autoHitActive = state
        if state then
            showNotification("Auto Hit Activated.")
            autoHit()
        else
            _G.autoHitActive = false
            showNotification("Auto Hit Deactivated.")
        end
    end
})

-- Function for auto-hitting
local function autoHit()
    while _G.autoHitActive do
        for _, otherPlayer in pairs(Players:GetPlayers()) do
            if otherPlayer ~= LocalPlayer and not table.find(selectedPlayers, otherPlayer.Name) then
                local targetCharacter = otherPlayer.Character
                if targetCharacter and targetCharacter:FindFirstChild("Humanoid") then
                    targetCharacter.Humanoid:TakeDamage(10) -- Adjust damage as needed
                end
            end
        end
        wait(hitspeedValue / 1000) -- Convert hitspeed to seconds
    end
end

-- Notification function
local ScreenGui = Instance.new("ScreenGui")
local Notification = Instance.new("TextLabel")

-- Function to create and display notification
local function showNotification(message)
    Notification.Text = message
    Notification.Size = UDim2.new(0.3, 0, 0.1, 0)
    Notification.Position = UDim2.new(0.5, -75, 0.1, 0)
    Notification.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    Notification.TextColor3 = Color3.fromRGB(255, 255, 255)
    Notification.TextScaled = true
    Notification.Parent = ScreenGui

    ScreenGui.Parent = game.CoreGui

    -- Fade out effect
    for i = 1, 10 do
        wait(0.1)
        Notification.TextTransparency = i / 10
    end

    Notification:Destroy()
end

-- Final touches for scrollability
Window:SelectTab(1) -- Selects the first tab on open
