local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- Create the Fluent UI
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
})

-- Add Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    Options = Window:AddTab({ Title = "Options", Icon = "settings" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "skull" }),
}

-- Notify that the GUI has loaded
Fluent:Notify({
    Title = "Welcome!",
    Content = "This GUI includes various settings.",
    Duration = 5
})

-- Main Tab Content
local MainSection = Tabs.Main:AddSection("Main Controls")

-- Speed Input
MainSection:AddInput("Speed", {
    Title = "Change Speed",
    Placeholder = "Enter Speed Value",
    Callback = function(value)
        local num = tonumber(value)
        if num then
            LocalPlayer.Character.Humanoid.WalkSpeed = num
        end
    end
})

-- Jump Power Input
MainSection:AddInput("Jump Power", {
    Title = "Change Jump Power",
    Placeholder = "Enter Jump Power Value",
    Callback = function(value)
        local num = tonumber(value)
        if num then
            LocalPlayer.Character.Humanoid.JumpPower = num
        end
    end
})

-- Options Tab Content
local OptionsSection = Tabs.Options:AddSection("Advanced Controls")

-- Gravity Changer Input
OptionsSection:AddInput("Gravity", {
    Title = "Change Gravity",
    Placeholder = "Enter Gravity Value",
    Callback = function(value)
        local num = tonumber(value)
        if num then
            workspace.Gravity = num
        end
    end
})

-- Music Toggle
local musicPlaying = false
local sound

OptionsSection:AddToggle("Play Music", {
    Title = "Enable Music",
    Default = false,
    Callback = function(state)
        if state then
            if not musicPlaying then
                sound = Instance.new("Sound", workspace)
                sound.SoundId = "rbxassetid://139235100" -- Replace with your asset ID
                sound:Play()
                musicPlaying = true
            end
        else
            if musicPlaying then
                sound:Stop()
                musicPlaying = false
            end
        end
    end
})

-- Killer Tab Content
local KillerSection = Tabs.Killer:AddSection("Killer Controls")

-- Function to set attack time
local function setAttackTime(value)
    local punchTool = LocalPlayer.Backpack:FindFirstChild("Punch")
    if punchTool then
        local attackTime = punchTool:FindFirstChild("attackTime")
        if attackTime then
            attackTime.Value = value
            Fluent:Notify({
                Title = "Success",
                Content = "Attack time set to " .. value,
                Duration = 3
            })
        else
            warn("attackTime property not found in Punch tool.")
            Fluent:Notify({
                Title = "Error",
                Content = "attackTime property not found.",
                Duration = 3
            })
        end
    else
        warn("Punch tool not found in backpack.")
        Fluent:Notify({
            Title = "Error",
            Content = "Punch tool not found in backpack.",
            Duration = 3
        })
    end
end

-- Input for Attack Time
KillerSection:AddInput("Attack Time", {
    Title = "Set Attack Time",
    Placeholder = "Enter Attack Time Value",
    Callback = function(value)
        local num = tonumber(value)
        if num then
            setAttackTime(num)
        else
            Fluent:Notify({
                Title = "Invalid Input",
                Content = "Please enter a valid number.",
                Duration = 3
            })
        end
    end
})

-- Final touches for scrollability
Window:SelectTab(1) -- Selects the first tab on open
