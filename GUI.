local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

wait(5) -- Ensure the script runs after the game has loaded

local Window = Fluent:CreateWindow({
    Title = "Duck GUI",
    SubTitle = "by Masterboy123",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "farming" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "skull" }),
    Stats = Window:AddTab({ Title = "Stats", Icon = "bar-chart" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "more-horizontal" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

Fluent:Notify({
    Title = "Warning",
    Content = "This GUI has been transferred over to Duck",
    SubContent = "You're Welcome, Duck",
    Duration = 7
})

-- Function to update player list
local function updatePlayerList(dropdown1, dropdown2)
    dropdown1.Values = {}
    dropdown2.Values = {}

    for _, player in ipairs(Players:GetPlayers()) do
        table.insert(dropdown1.Values, player.Name)
        table.insert(dropdown2.Values, player.Name)
    end

    dropdown1:SetValue({})
    dropdown2:SetValue({})
end

-- Killer Tab Dropdowns
local ExcludeDropdown = Tabs.Killer:AddDropdown("Exclude Players", {
    Title = "Players",
    Values = {},
    Multi = true,
    Default = {},
})

local IncludeDropdown = Tabs.Killer:AddDropdown("Include Players", {
    Title = "Players",
    Values = {},
    Multi = true,
    Default = {},
})

updatePlayerList(ExcludeDropdown, IncludeDropdown)

-- Teleport functions
local function teleportPlayers(excludePlayers)
    local myCharacter = LocalPlayer.Character
    if myCharacter then
        local myPosition = myCharacter:FindFirstChild("HumanoidRootPart").Position

        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and not table.find(excludePlayers, player.Name) then
                local character = player.Character
                if character and character:FindFirstChild("HumanoidRootPart") then
                    character.HumanoidRootPart.Position = myPosition
                end
            end
        end
    end
end

local function teleportSelectedPlayers(selectedPlayers)
    local myCharacter = LocalPlayer.Character
    if myCharacter then
        local myPosition = myCharacter:FindFirstChild("HumanoidRootPart").Position

        for _, playerName in ipairs(selectedPlayers) do
            local player = Players:FindFirstChild(playerName)
            if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                player.Character.HumanoidRootPart.Position = myPosition
            end
        end
    end
end

-- Killer Tab Buttons for teleportation
Tabs.Killer:AddButton("Start Exclude Teleport", function()
    teleportPlayers(ExcludeDropdown.Value)
end)

Tabs.Killer:AddButton("Start Include Teleport", function()
    teleportSelectedPlayers(IncludeDropdown.Value)
end)

-- Add buttons to each tab for debugging
for _, tab in pairs(Tabs) do
    tab:AddButton("Test " .. tab.Title, function()
        Fluent:Notify({
            Title = tab.Title .. " Button Clicked",
            Content = "This tab is working!",
            Duration = 3
        })
    end)
end

-- Addons
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Debug",
    Content = "GUI should now be displayed.",
    Duration = 5
})

SaveManager:LoadAutoloadConfig()
