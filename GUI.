local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- Create the Fluent UI
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
})

-- Add Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    Options = Window:AddTab({ Title = "Options", Icon = "settings" }),
}

-- Notify that the GUI has loaded
Fluent:Notify({
    Title = "Welcome!",
    Content = "This GUI includes various settings.",
    Duration = 5
})

-- Main Tab Content
local MainSection = Tabs.Main:AddSection("Main Controls")

-- Add Scrollable Frame for the Main Section
local scrollFrame = MainSection:AddScrollingFrame({
    Size = UDim2.new(1, 0, 1, 0),
    CanvasSize = UDim2.new(1, 0, 3, 0), -- Adjust for more scrolling
})

-- Speed Input
scrollFrame:AddInput("Speed", {
    Title = "Change Speed",
    Placeholder = "Enter Speed Value",
    Callback = function(value)
        local num = tonumber(value)
        if num then
            LocalPlayer.Character.Humanoid.WalkSpeed = num
        end
    end
})

-- Jump Power Input
scrollFrame:AddInput("JumpPower", {
    Title = "Change Jump Power",
    Placeholder = "Enter Jump Power Value",
    Callback = function(value)
        local num = tonumber(value)
        if num then
            LocalPlayer.Character.Humanoid.JumpPower = num
        end
    end
})

-- Infinite Jump Toggle
local infiniteJumpToggle = scrollFrame:AddToggle("Infinite Jump", {
    Title = "Enable Infinite Jump",
    Default = false,
})

UserInputService.JumpRequest:Connect(function()
    if infiniteJumpToggle.Value then
        local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)

-- Noclip Toggle
local noclipToggle = scrollFrame:AddToggle("Noclip", {
    Title = "Enable Noclip",
    Default = false,
})

local function setNoclip(value)
    local character = LocalPlayer.Character
    if character then
        for _, part in ipairs(character:GetChildren()) do
            if part:IsA("BasePart") then
                part.CanCollide = not value
            end
        end
    end
end

noclipToggle:OnChanged(function(value)
    while noclipToggle.Value do
        setNoclip(true)
        wait(0.1)
    end
    setNoclip(false)
end)

-- Gravity Changer Input
scrollFrame:AddInput("Gravity", {
    Title = "Change Gravity",
    Placeholder = "Enter Gravity Value",
    Callback = function(value)
        local num = tonumber(value)
        if num then
            workspace.Gravity = num
        end
    end
})

-- FOV Input
scrollFrame:AddInput("FOV", {
    Title = "Change FOV",
    Placeholder = "Enter FOV Value",
    Callback = function(value)
        local num = tonumber(value)
        if num then
            Camera.FieldOfView = num
        end
    end
})

-- Time Manipulation Dropdown
local timeDropdown = scrollFrame:AddDropdown("Time Manipulation", {
    Title = "Select Time",
    Values = {"Morning", "Afternoon", "Night"},
    Multi = false,
    Default = 1,
})

timeDropdown:OnChanged(function(value)
    if value == "Morning" then
        game.Lighting.ClockTime = 6
    elseif value == "Afternoon" then
        game.Lighting.ClockTime = 12
    elseif value == "Night" then
        game.Lighting.ClockTime = 18
    end
end)

-- Options Tab Content
local OptionsSection = Tabs.Options:AddSection("Advanced Controls")

-- Music Toggle
local musicToggle = OptionsSection:AddToggle("Background Music", {
    Title = "Enable Background Music",
    Default = false,
})

-- Volume Input
OptionsSection:AddInput("Volume", {
    Title = "Set Volume",
    Placeholder = "Enter Volume (0-100)",
    Callback = function(value)
        local num = tonumber(value)
        if num and num >= 0 and num <= 100 then
            if musicSound then
                musicSound.Volume = num / 100
            end
            print("Volume set to: " .. num)
        else
            Fluent:Notify({
                Title = "Invalid Volume",
                Content = "Please enter a value between 0 and 100.",
                Duration = 3
            })
        end
    end
})

-- Create a Sound object for the background music
local musicSound
local function setupMusic()
    musicSound = Instance.new("Sound")
    musicSound.SoundId = "rbxassetid://139235100"
    musicSound.Looped = true
    musicSound.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
end

setupMusic()

-- Toggle music on and off
musicToggle:OnChanged(function(value)
    if value then
        musicSound:Play()
    else
        musicSound:Stop()
    end
end)

-- Create a Sound object for the looping sound
local loopedSound
local function setupLoopedSound()
    loopedSound = Instance.new("Sound")
    loopedSound.SoundId = "rbxassetid://6847929757"
    loopedSound.Looped = true
    loopedSound.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
end

setupLoopedSound()

-- Button to control the looped sound
OptionsSection:AddButton("Toggle Loop Sound", {
    Title = "Play/Pause Looping Sound",
    Callback = function()
        if loopedSound.IsPlaying then
            loopedSound:Stop()
            Fluent:Notify({
                Title = "Loop Sound",
                Content = "Looping sound paused.",
                Duration = 3
            })
        else
            loopedSound:Play()
            Fluent:Notify({
                Title = "Loop Sound",
                Content = "Looping sound playing.",
                Duration = 3
            })
        end
    end
})

-- Rejoin Button
local function rejoinServer()
    TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId)
end

OptionsSection:AddButton("Rejoin Server", {
    Title = "Rejoin Current Server",
    Callback = rejoinServer,
})

-- Reset Settings Button
local function resetSettings()
    infiniteJumpToggle.Value = false
    noclipToggle.Value = false
    musicToggle.Value = false
    musicSound:Stop()
    loopedSound:Stop()
    LocalPlayer.Character.Humanoid.WalkSpeed = 16
    LocalPlayer.Character.Humanoid.JumpPower = 50
    workspace.Gravity = 196.2
    Camera.FieldOfView = 70
    game.Lighting.ClockTime = 12

    Fluent:Notify({
        Title = "Settings Reset",
        Content = "All settings have been reset to defaults.",
        Duration = 3
    })
end

OptionsSection:AddButton("Reset Settings", {
    Title = "Reset All Settings",
    Callback = resetSettings,
})

-- Final touches for scrollability
Window:SelectTab(1) -- Selects the first tab on open
