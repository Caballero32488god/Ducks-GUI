local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local ScreenGui = Instance.new("ScreenGui")
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local Window = Fluent:CreateWindow({
    Title = "Fluent GUI",
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
})

-- Add Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    Options = Window:AddTab({ Title = "Options", Icon = "settings" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "skull" }),
}

-- Main Tab Content
local MainSection = Tabs.Main:AddSection("Main Controls")

-- Speed Changer
MainSection:AddInput("Speed", {
    Title = "Change Speed",
    Placeholder = "Enter Speed Value",
    Callback = function(value)
        local num = tonumber(value)
        if num then
            LocalPlayer.Character.Humanoid.WalkSpeed = num
        end
    end
})

-- Jump Power Changer
MainSection:AddInput("Jump Power", {
    Title = "Change Jump Power",
    Placeholder = "Enter Jump Power Value",
    Callback = function(value)
        local num = tonumber(value)
        if num then
            LocalPlayer.Character.Humanoid.JumpPower = num
        end
    end
})

-- Infinite Jump
local infiniteJumpEnabled = false
MainSection:AddToggle("Infinite Jump", {
    Title = "Toggle Infinite Jump",
    Default = false,
    Callback = function(state)
        infiniteJumpEnabled = state
    end
})

UserInputService.JumpRequest:Connect(function()
    if infiniteJumpEnabled then
        LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

-- Anti AFK
local afkEnabled = false
MainSection:AddToggle("Anti AFK", {
    Title = "Toggle Anti AFK",
    Default = false,
    Callback = function(state)
        afkEnabled = state
    end
end)

-- Gravity Changer
MainSection:AddInput("Gravity", {
    Title = "Change Gravity",
    Placeholder = "Enter Gravity Value",
    Callback = function(value)
        local num = tonumber(value)
        if num then
            workspace.Gravity = num
        end
    end
})

-- FPS Unlocker
local fpsUnlockerEnabled = false
MainSection:AddToggle("FPS Unlocker", {
    Title = "Toggle FPS Unlocker",
    Default = false,
    Callback = function(state)
        fpsUnlockerEnabled = state
        if state then
            settings().Rendering.QualityLevel = 10 -- Max quality
            game:GetService("RunService").RenderStepped:Connect(function()
                RunService.Heartbeat:Wait() -- Keep the game running smoothly
            end)
        else
            settings().Rendering.QualityLevel = 2 -- Reset to low quality
        end
    end
})

-- Anti AFK Loop
while true do
    if afkEnabled then
        LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 0.1)
        wait(2) -- Adjust the frequency as needed
    end
    wait(1)
end

-- Killer Tab Content
local KillerSection = Tabs.Killer:AddSection("Killer Controls")

-- Dropdown for Player Selection
local selectedPlayers = {}
local playerDropdown = KillerSection:AddDropdown("Select Players to Ignore", {
    Title = "Ignore Players",
    Values = {}, -- Will be populated with player names
    Multi = true,
})

local function updatePlayerDropdown()
    local playerNames = {}
    for _, player in ipairs(Players:GetPlayers()) do
        table.insert(playerNames, player.Name)
    end
    playerDropdown:SetValues(playerNames)
end

-- Call this function initially to populate the dropdown
updatePlayerDropdown()

-- Update dropdown when players join/leave
Players.PlayerAdded:Connect(updatePlayerDropdown)
Players.PlayerRemoving:Connect(updatePlayerDropdown)

-- Auto-Punch Toggle
local punching = false
KillerSection:AddToggle("Auto Punch", {
    Title = "Toggle Auto Punch",
    Default = false,
    Callback = function(state)
        punching = state
        if state then
            autoUseTool()
        end
    end
})

local function autoUseTool()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local tool = LocalPlayer.Backpack:FindFirstChild("Punch") -- Ensure this matches your tool's name

    if tool then
        humanoid:EquipTool(tool)

        while punching and tool.Parent == character do
            tool:Activate() -- Activate the tool
            wait(0.1) -- Adjust the wait time for punching speed
        end
    end
end

-- Auto Killer Toggle
local autoKillerEnabled = false
KillerSection:AddToggle("Auto Killer", {
    Title = "Toggle Auto Killer",
    Default = false,
    Callback = function(state)
        autoKillerEnabled = state
        if state then
            teleportAllPlayers()
            autoUseTool()
        end
    end
})

-- Function to teleport all players to the local player's position
local function teleportAllPlayers()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and not table.find(selectedPlayers, player.Name) then
            local character = player.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                character:SetPrimaryPartCFrame(LocalPlayer.Character.HumanoidRootPart.CFrame)
            end
        end
    end
end

-- Initialize GUI
Window:SelectTab(1) -- Selects the first tab on open
