local Players = game:GetService("Players")
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "Game Hacks", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

-- Main Tab
local MainTab = Window:MakeTab({
	Name = "Main",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

-- Speed Input
MainTab:AddTextbox({
	Name = "Speed",
	Default = "16", -- Default speed value
	TextDisappear = false,
	Callback = function(Value)
		local speedValue = tonumber(Value) or 16
		for _, player in ipairs(Players:GetPlayers()) do
			local character = player.Character
			if character then
				local humanoid = character:FindFirstChildOfClass("Humanoid")
				if humanoid then
					humanoid.WalkSpeed = speedValue
				end
			end
		end
	end
})

-- Jump Power Input
MainTab:AddTextbox({
	Name = "Jump Power",
	Default = "50", -- Default jump power value
	TextDisappear = false,
	Callback = function(Value)
		local jumpPowerValue = tonumber(Value) or 50
		for _, player in ipairs(Players:GetPlayers()) do
			local character = player.Character
			if character then
				local humanoid = character:FindFirstChildOfClass("Humanoid")
				if humanoid then
					humanoid.JumpPower = jumpPowerValue
				end
			end
		end
	end
})

-- Gravity Input
MainTab:AddTextbox({
	Name = "Gravity",
	Default = "196.2", -- Default gravity value
	TextDisappear = false,
	Callback = function(Value)
		local gravityValue = tonumber(Value) or 196.2
		workspace.Gravity = gravityValue
	end
})

-- Noclip Button
MainTab:AddButton({
	Name = "Enable NoClip",
	Callback = function()
		local function setNoClip(character, value)
			for _, part in ipairs(character:GetDescendants()) do
				if part:IsA("BasePart") then
					part.CanCollide = not value
				end
			end
		end

		for _, player in ipairs(Players:GetPlayers()) do
			local character = player.Character
			if character then
				setNoClip(character, true) -- Enable no clip
			end
		end
	end
})

-- Infinite Jump Button
MainTab:AddButton({
	Name = "Enable Infinite Jump",
	Callback = function()
		local UserInputService = game:GetService("UserInputService")
		for _, player in ipairs(Players:GetPlayers()) do
			local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
			if humanoid then
				UserInputService.JumpRequest:Connect(function()
					humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
				end)
			end
		end
	end
})

-- Rebirths Tab
local RebirthTab = Window:MakeTab({
	Name = "Rebirths",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local rebirthCount = 0 -- Track the number of rebirths in the session

-- Function to update the rebirth counter display
local function updateRebirthCounter()
	local leaderstats = Players.LocalPlayer:FindFirstChild("leaderstats")
	local rebirthsStat = leaderstats and leaderstats:FindFirstChild("Rebirths")
	local currentRebirths = rebirthsStat and rebirthsStat.Value or 0
	
	RebirthTab:RemoveLabel("Rebirth Counter") -- Remove old label if exists
	RebirthTab:AddLabel("Rebirth Counter: " .. rebirthCount) -- Update counter display
end

-- Rebirth Limit Input
RebirthTab:AddTextbox({
	Name = "Rebirth Limit",
	Default = "20000", -- Default rebirth limit value
	TextDisappear = false,
	Callback = function(Value)
		local limit = tonumber(Value) or 20000

		-- Access leaderstats and get the current rebirths
		local leaderstats = Players.LocalPlayer:FindFirstChild("leaderstats")
		local rebirthsStat = leaderstats and leaderstats:FindFirstChild("Rebirths")

		local currentRebirths = rebirthsStat and rebirthsStat.Value or 0

		-- Check if the limit is lower than current rebirths
		if limit < currentRebirths then
			showNotification("Too Low for your rebirths.")
		else
			showNotification("Rebirth limit set to " .. limit) -- Confirmation message
		end
	end
})

-- Manual Rebirth Button
RebirthTab:AddButton({
	Name = "Manual Rebirth",
	Callback = function()
		local args = {
			[1] = "rebirthRequest"
		}
		game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer(unpack(args))
		rebirthCount = rebirthCount + 1 -- Increment the counter
		updateRebirthCounter() -- Update the display
		showNotification("Manual rebirth executed.")
	end
})

-- Auto Rebirth Toggle
RebirthTab:AddToggle({
	Name = "Auto Rebirth",
	Default = false,
	Callback = function(Value)
		local elias782k = 1
		local desiredLimit = 20000 -- Default limit (can be adjusted)

		while elias782k == 1 do
			if not Value then
				elias782k = 2
			end

			wait(1)

			-- Access leaderstats and get the current rebirths
			local leaderstats = Players.LocalPlayer:FindFirstChild("leaderstats")
			local rebirthsStat = leaderstats and leaderstats:FindFirstChild("Rebirths")

			local currentRebirths = rebirthsStat and rebirthsStat.Value or 0

			-- Check if current rebirths are less than desired limit
			if currentRebirths < desiredLimit then
				local args = {
					[1] = "rebirthRequest"
				}
				game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer(unpack(args))
				rebirthCount = rebirthCount + 1 -- Increment the counter
				updateRebirthCounter() -- Update the display
			else
				showNotification("Reached rebirth limit of " .. desiredLimit)
				elias782k = 2 -- Stop the loop if limit is reached
			end
		end
	end    
})

-- Killer Tab
local KillerTab = Window:MakeTab({
	Name = "Killer",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local selectedTarget = nil -- Variable to store the selected target

-- Target Selector Dropdown
KillerTab:AddDropdown({
	Name = "Select Target",
	Default = "None",
	Options = {}, -- This will be populated with player names
	Callback = function(Value)
		selectedTarget = Value -- Store the selected target
	end
})

-- Function to update the dropdown options with current players
local function updateTargetDropdown()
	local playerNames = {}
	for _, player in ipairs(Players:GetPlayers()) do
		if player.Name ~= Players.LocalPlayer.Name then -- Exclude self
			table.insert(playerNames, player.Name)
		end
	end
	KillerTab:UpdateDropdown("Select Target", playerNames) -- Update the dropdown
end

-- Action Button
KillerTab:AddButton({
	Name = "Attack Target",
	Callback = function()
		if selectedTarget then
			local targetPlayer = Players:FindFirstChild(selectedTarget)
			if targetPlayer and targetPlayer.Character then
				-- Perform action on the target player (e.g., "kill" logic)
				-- Example: targetPlayer.Character:BreakJoints() -- This will "kill" the player
				showNotification(selectedTarget .. " has been attacked!")
			else
				showNotification("Target not found.")
			end
		else
			showNotification("No target selected.")
		end
	end
})

-- Function to show notification
local function showNotification(message)
	local notification = Instance.new("TextLabel")
	notification.Size = UDim2.new(0, 300, 0, 50)
	notification.Position = UDim2.new(0.5, -150, 0.5, -25)
	notification.BackgroundColor3 = Color3.new(1, 0, 0) -- Red color
	notification.Text = message
	notification.TextColor3 = Color3.new(1, 1, 1)
	notification.Parent = game.CoreGui
	wait(3) -- Show for 3 seconds
	notification:Destroy()
end

-- Update the dropdown when the script runs
updateTargetDropdown()

-- Update dropdown when players join or leave
game.Players.PlayerAdded:Connect(updateTargetDropdown)
game.Players.PlayerRemoving:Connect(updateTargetDropdown)

-- Initialize the counter display
updateRebirthCounter()

-- Finalize the UI
OrionLib:Init()
