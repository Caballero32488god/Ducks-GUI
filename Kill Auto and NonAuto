local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local StarterPack = game:GetService("StarterPack")
local ScreenGui = Instance.new("ScreenGui")
local Notification = Instance.new("TextLabel")

-- Global variables for toggle state and no-kill list
_G.teleportPlayersActive = false
_G.noKillList = {}
_G.killList = {}
local isEnabled = false -- Variable to track if the punching feature is enabled

-- Function to create and display notification
local function showNotification(message)
    Notification.Text = message
    Notification.Size = UDim2.new(0.3, 0, 0.1, 0)
    Notification.Position = UDim2.new(0.5, -75, 0.1, 0)
    Notification.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    Notification.TextColor3 = Color3.fromRGB(255, 255, 255)
    Notification.TextScaled = true
    Notification.Parent = ScreenGui

    ScreenGui.Parent = game.CoreGui

    -- Fade out effect
    for i = 1, 10 do
        wait(0.1)
        Notification.TextTransparency = i / 10
    end

    -- Remove notification after fading out
    ScreenGui:Destroy()
end

-- Function to set attackTime of Punch tool to 0
local function setAttackTime()
    local punchTool = StarterPack:FindFirstChild("Punch")

    if punchTool then
        local attackTime = punchTool:FindFirstChild("attackTime")
        
        if attackTime then
            attackTime.Value = 0  -- Set the attack time to 0
            print("attackTime set to 0 for Punch tool.")
        else
            print("attackTime not found in Punch tool.")
        end
    else
        print("Punch tool not found in StarterPack.")
    end
end

-- Function to equip the Punch tool and perform the punch action
local function equipAndPunch()
    while isEnabled do
        local punchTool = LocalPlayer.Backpack:FindFirstChild("Punch")

        if punchTool then
            -- Equip the Punch tool
            LocalPlayer.Character.Humanoid:EquipTool(punchTool)
            wait(0.1) -- Wait briefly to ensure the tool is equipped

            -- Start the punching action after a 5-second wait
            wait(5)  -- Initial wait

            -- Punching loop
            while isEnabled do
                LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
                LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
                wait(0)  -- Wait for 0 seconds before the next punch (immediate)
            end
        else
            print("Punch tool not found in Backpack. Waiting...")
            wait(2) -- Wait before checking again
        end
    end
end

-- Function to continuously teleport player characters
local function teleportPlayers()
    while _G.teleportPlayersActive do
        wait(0.1) -- Delay to reduce performance impact

        -- Iterate through other players
        for _, otherPlayer in pairs(Players:GetPlayers()) do
            local targetCharacter = otherPlayer.Character

            if otherPlayer ~= LocalPlayer and targetCharacter then
                if _G.noKillList[otherPlayer.Name] then
                    continue -- Skip players in the no-kill list
                end
                
                local targetRootPart = targetCharacter:FindFirstChild("HumanoidRootPart")
                if targetRootPart then
                    -- Teleport all other players not in the no-kill list to a position in front of the local player
                    local positionInFront = LocalPlayer.Character.HumanoidRootPart.Position + LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector * 5
                    targetRootPart.Position = positionInFront + Vector3.new(0, 5, 0) -- Raise them above
                end
            end
        end
    end
end

-- Function to handle chat commands
LocalPlayer.Chatted:Connect(function(message)
    local args = message:split(" ")

    if args[1]:lower() == "on" then
        isEnabled = true
        _G.teleportPlayersActive = true
        equipAndPunch() -- Start punching if enabled
        teleportPlayers() -- Start teleporting players
        showNotification("Started teleporting players and punching.")
    elseif args[1]:lower() == "off" then
        isEnabled = false
        _G.teleportPlayersActive = false
        showNotification("Stopped teleporting players and punching.")
    elseif args[1]:lower() == "status" then
        print("Punching is currently " .. (isEnabled and "ON" or "OFF"))
        print("Teleporting players is currently " .. (_G.teleportPlayersActive and "ON" or "OFF"))
    elseif args[1]:lower() == ";nokill" then
        for i = 2, #args do
            local user = args[i]
            if not _G.noKillList[user] then
                _G.noKillList[user] = true -- Add each user to no-kill list
            end
        end
        showNotification("Added to no-kill list: " .. table.concat(args, ", ", 2))
    elseif args[1]:lower() == ";kill" and args[2] then
        local targetUser = args[2]
        _G.killList[targetUser] = true -- Add user to kill list
        showNotification("Started bringing " .. targetUser .. "'s parts to you.")
    elseif args[1]:lower() == ";stopkill" and args[2] then
        local targetUser = args[2]
        _G.killList[targetUser] = nil -- Remove the user from the kill list
        showNotification("Stopped bringing " .. targetUser .. "'s parts.")
    end
end)

-- Call the function to set the attackTime
setAttackTime()

print("Type 'on' to start teleporting players and punching.")
print("Type 'off' to stop teleporting players and punching.")
print("Type ';NoKill (User1) (User2)...' to add multiple users to the no-kill list.")
print("Type ';Kill (User)' to bring a user's parts to you continuously.")
print("Type ';StopKill (User)' to stop bringing a user's parts.")
